if(${PRIVMX_BUILD_DEBUG} MATCHES "FULL")
    set(PRIVMX_USE_DEBUG ON)
    set(PRIVMX_DEBUG_TIME ON)
    set(PRIVMX_DEBUG_OUTPUT_TIMESTAMP_ON_START ON)
elseif(PRIVMX_BUILD_DEBUG)
    set(PRIVMX_USE_DEBUG ON)
    set(PRIVMX_DEBUG_TIME OFF)
    set(PRIVMX_DEBUG_OUTPUT_TIMESTAMP_ON_START OFF)
endif()
message(STATUS "Enable utils debug - PRIVMX_BUILD_DEBUG=${PRIVMX_BUILD_DEBUG}")
set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_BINARY_DIR}/include)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/privmx/utils/DebugConfig.hpp.in ${CMAKE_CURRENT_BINARY_DIR}/include/privmx/utils/DebugConfig.hpp @ONLY)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/include/privmx/utils/DebugConfig.hpp DESTINATION include/privmx/utils)

option(PRIVMX_BUILD_LOGGER "Enable privmx logger" OFF)
if(PRIVMX_BUILD_LOGGER)
    set(PRIVMX_ENABLE_LOGGER ON)
endif()
message(STATUS "Enable privmx logger - PRIVMX_BUILD_LOGGER=${PRIVMX_ENABLE_LOGGER}")
if(PRIVMX_BUILD_LOGGER)
    option(PRIVMX_ENABLE_LOGGER_TIMER "Enable privmx logger timer mode" OFF)
    if(NOT PRIVMX_LOGGER_LEVEL)
        set(PRIVMX_LOGGER_LEVEL 4)
    endif()
    option(PRIVMX_LOGGER_OUTPUT_INCLUDE_TIMESTAMP "Privmx logger include timestamp" ON)
    option(PRIVMX_LOGGER_OUTPUT_INCLUDE_THREADID "Privmx logger include threadId" OFF)
    message(STATUS "Enable privmx logger timer mode - PRIVMX_ENABLE_LOGGER_TIMER=${PRIVMX_ENABLE_LOGGER_TIMER}")
    message(STATUS "Privmx logger level - PRIVMX_LOGGER_LEVEL=${PRIVMX_LOGGER_LEVEL}")
    message(STATUS "Privmx logger include timestamp - PRIVMX_LOGGER_OUTPUT_INCLUDE_TIMESTAMP=${PRIVMX_LOGGER_OUTPUT_INCLUDE_TIMESTAMP}")
    message(STATUS "Privmx logger include threadId - PRIVMX_LOGGER_OUTPUT_INCLUDE_THREADID=${PRIVMX_LOGGER_OUTPUT_INCLUDE_THREADID}")


    option(PRIVMX_LOGGER_OUTPUT_INCLUDE_TIMESTAMP "Privmx logger output in to stdout" ON)
    option(PRIVMX_LOGGER_OUTPUT_STDERR "Privmx logger output in to stderr" OFF)
    option(PRIVMX_LOGGER_OUTPUT_FILE "Privmx logger output in to file" OFF)
    
    message(STATUS "Privmx logger output in to stdout - PRIVMX_ENABLE_LOGGER_TIMER=${PRIVMX_LOGGER_OUTPUT_STDOUT}")
    message(STATUS "Privmx logger output in to stderr - PRIVMX_ENABLE_LOGGER_TIMER=${PRIVMX_LOGGER_OUTPUT_STDERR}")
    message(STATUS "Privmx logger output in to file - PRIVMX_ENABLE_LOGGER_TIMER=${PRIVMX_LOGGER_OUTPUT_FILE}")
    if(PRIVMX_LOGGER_OUTPUT_FILE)
        if(NOT PRIVMX_LOGGER_OUTPUT_FILE_PATH)
            set(PRIVMX_LOGGER_LEVEL "log.txt")
        endif()
        message(STATUS "Privmx logger output file path - PRIVMX_ENABLE_LOGGER_TIMER=${PRIVMX_LOGGER_OUTPUT_FILE_PATH}")
    endif()
endif()
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/privmx/utils/logger/Config.hpp.in ${CMAKE_CURRENT_BINARY_DIR}/include/privmx/utils/logger/Config.hpp)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/include/privmx/utils/logger/Config.hpp DESTINATION include/privmx/utils/logger)

if(NOT PRIVMX_EXECUTOR_THREAD_POOL_SIZE)
    set(PRIVMX_EXECUTOR_THREAD_POOL_SIZE 4)
endif()
message(STATUS "Privmx executor async thread poll - PRIVMX_EXECUTOR_THREAD_POOL_SIZE=${PRIVMX_EXECUTOR_THREAD_POOL_SIZE}")
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/privmx/utils/ExecutorConfig.hpp.in ${CMAKE_CURRENT_BINARY_DIR}/include/privmx/utils/ExecutorConfig.hpp)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/include/privmx/utils/ExecutorConfig.hpp.hpp DESTINATION include/privmx/utils)

file(GLOB_RECURSE SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp)
add_library(privmxutils OBJECT ${SOURCES})
target_include_directories(privmxutils PUBLIC ${INCLUDE_DIRS})
target_compile_options(privmxutils PRIVATE -fPIC -Wall -Wextra -Wno-narrowing)
target_link_libraries(privmxutils PUBLIC Poco::Foundation Poco::JSON Pson)
if(BUILD_SHARED_LIBS)
    set_target_properties(privmxutils PROPERTIES POSITION_INDEPENDENT_CODE True)
endif()
if(PRIVMX_INSTALL_PRIVATE_HEADERS)
    install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/privmx DESTINATION include)
endif()
if(PRIVMX_WERROR)
    target_compile_options(privmxutils PRIVATE -Werror)
endif()

if(PRIVMX_ENABLE_TESTS)
    include(FindGTest)
    include(GoogleTest)
    enable_testing()
    find_package(GTest REQUIRED)
    file(GLOB_RECURSE TESTS_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/test/*.cpp)
    add_executable(privmxutils_test ${TESTS_SOURCES})
    target_link_libraries(privmxutils_test PUBLIC Poco::Foundation Poco::JSON Pson privmxutils GTest::GTest GTest::Main)
    gtest_add_tests(TARGET privmxutils_test)
endif()
